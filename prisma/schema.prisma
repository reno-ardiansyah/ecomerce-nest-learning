generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model addresses {
  id          Int     @id @default(autoincrement())
  user_id     Int
  label       String?
  line1       String
  line2       String?
  city        String
  state       String?
  country     String
  postal_code String?
  is_default  Boolean @default(false)
  users       users   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model cart_items {
  id         Int      @id @default(autoincrement())
  cart_id    Int
  product_id Int
  quantity   Int      @default(1)
  carts      carts    @relation(fields: [cart_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model carts {
  id         Int          @id @default(autoincrement())
  user_id    Int
  created_at DateTime     @default(now()) @db.Timestamptz(6)
  cart_items cart_items[]
  users      users        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model categories {
  id                 Int                  @id @default(autoincrement())
  name               String
  parent_id          Int?
  slug               String               @unique
  description        String?
  categories         categories?          @relation("categoriesTocategories", fields: [parent_id], references: [id], onUpdate: NoAction)
  other_categories   categories[]         @relation("categoriesTocategories")
  product_categories product_categories[]
}

model images {
  id             Int      @id @default(autoincrement())
  imageable_id   Int
  imageable_type String
  url            String
  alt_text       String?
  is_primary     Boolean  @default(false)
  created_at     DateTime @default(now()) @db.Timestamptz(6)

  @@index([imageable_type, imageable_id], map: "idx_images_morph")
}

model order_items {
  id         Int      @id @default(autoincrement())
  order_id   Int
  product_id Int?
  quantity   Int
  price      Decimal  @db.Decimal(12, 2)
  orders     orders   @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products   products? @relation(fields: [product_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model orders {
  id           Int           @id @default(autoincrement())
  user_id      Int?
  status       String        @default("pending")
  total_amount Decimal       @db.Decimal(12, 2)
  created_at   DateTime      @default(now()) @db.Timestamptz(6)
  order_items  order_items[]
  users        users?         @relation(fields: [user_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  payments     payments?
}

model payments {
  id       Int       @id @default(autoincrement())
  order_id Int       @unique
  method   String
  status   String    @default("pending")
  paid_at  DateTime? @db.Timestamptz(6)
  orders   orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model product_categories {
  product_id  Int
  category_id Int
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products    products   @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([product_id, category_id])
}

model product_tags {
  product_id Int
  tag_id     Int
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tags       tags     @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([product_id, tag_id])
}

model products {
  id                 Int                  @id @default(autoincrement())
  sku                String               @unique
  name               String
  description        String?
  price              Decimal              @db.Decimal(12, 2)
  stock              Int                  @default(0)
  created_at         DateTime             @default(now()) @db.Timestamptz(6)
  updated_at         DateTime             @default(now()) @db.Timestamptz(6)
  cart_items         cart_items[]
  order_items        order_items[]
  product_categories product_categories[]
  product_tags       product_tags[]
  wishlist_items     wishlist_items[]
}

model profiles {
  id         Int       @id @default(autoincrement())
  user_id    Int       @unique
  avatar_url String?
  bio        String?
  birthdate  DateTime? @db.Date
  gender     String?
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  id              Int      @id @default(autoincrement())
  reviewable_id   Int
  reviewable_type String
  user_id         Int
  rating          Int
  comment         String?
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  users           users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([reviewable_type, reviewable_id], map: "idx_reviews_morph")
}

model tags {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  product_tags product_tags[]
}

model users {
  id            Int         @id @default(autoincrement())
  name          String
  email         String      @unique
  password_hash String
  phone         String?
  role          user_role   @default(customer)
  email_verified_at DateTime?
  token         String?
  token_expires_at DateTime?
  created_at    DateTime    @default(now()) @db.Timestamptz(6)
  updated_at    DateTime    @default(now()) @db.Timestamptz(6)
  addresses     addresses[]
  carts         carts[]
  orders        orders[]
  profiles      profiles?
  reviews       reviews[]
  wishlists     wishlists[]
}

model wishlist_items {
  id          Int       @id @default(autoincrement())
  wishlist_id Int
  product_id  Int
  products    products  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  wishlists   wishlists @relation(fields: [wishlist_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model wishlists {
  id             Int              @id @default(autoincrement())
  user_id        Int
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  wishlist_items wishlist_items[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum user_role {
  admin
  customer
  seller
}
